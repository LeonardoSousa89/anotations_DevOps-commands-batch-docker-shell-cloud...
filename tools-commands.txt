linux:
	sudo rm -rf [nome-do-diretório]

dos/batch:

node:
	npm init -y
	npm start
	npm test
	npm run [comando]
	npm i {obs*: pegará as dependencias cadastradas no package.json}
	npm i [nome-da-dependencia]	
	npm run [comando] {obs*: pegará os comandos registrados no package.json}
	node [arquivo.js]

babel:

	OBS** para uso das especificações do ecma6 [import/export]
	
	npm i babel-cli
	npm i babel-preset-es2015
	
	arquivo(s):
		.babelrc:
			{
				"presets": ["es2015"]
			}
		
		package.json:
			EX: 
				"nodemon --exec babel-node index.js"
				"node --exec babel-node index.js" 
	
	
react-native:
	npm i -g react-native
	
	react-native init [nome-do-app]
	
	emulator -list-avds
	emulator -no-snapshot -avd [nome-do-dispositivo-virtual]
	
	adb devices 

	react-native run-android
	react-native run-ios

	react-native link

	npx react-native run-android
	npx react-native info

	expo:
		

Cypress:
	npx cypress open
	npx cypress run

	com allure instalado e configurado:
		npx cypress run --env allure=true

		allure generate <directory-with-results>
		allure generate <directory-with-results> -o <directory-with-report>
		allure open <directory-with-report>


	verões antigas:
		npx cypress run --config video=false --env allure=true
		

React:
	npm i -g react
	npx create-react-app [nome-do-app]
	npx create-react-app [nome-do-app] --template typescript
	
	[o sass você usa da forma padrão a usual em projetos com javascript, html e css puros]

Vue:
	npm i -g @vue/cli
	vue create [nome-do-app]

Angular:
	npm i -g @angular/cli
	ng n [nome-do-app]
	
	**com sass
	ng n [nome-do-app] --style=scss
	
	**com gestão de rotas
	ng n [nome-do-app] --routing --defaults
	
	**com sass e gestão de rotas[instalação padrão]
	ng n [nome-do-app] --routing --defaults --style=scss
	
	ng s
	
	ng g c [nome-do-componente]
	
	ng g i [nome-da-interface]

	ng g d [nome-da-diretiva]
	
	ng g s [nome-do-serviço]
	
	ng g m [nome-do-modulo]
	
	[instalação padrão]
	ng g m [nome-do-modulo] --routing

	ng test
	ng test --code-coverage
	
	ng add @angular/material
	
	ng build

	ng g guard [nome-do-guard] *pesquisar os nome usados por convenção dos desenvolvedores | por padrão este é canActivate
	ng g guard [nome-do-guard] --implements CanActivateChild
	ng g guard [nome-do-guard] --implements canActivate
	
Sass:
	npm i -g node-sass
	node-sass [arquivo.scss] [arquivo.css]
	node-sass --watch [arquivo.scss] [arquivo.css]

typescript:
	
	npm i -g typescript

	COMMON COMMANDS

		 tsc
		 Compiles the current project (tsconfig.json in the working directory.)

		 tsc app.ts util.ts
		 Ignoring tsconfig.json, compiles the specified files with default compiler options.

		 tsc -b
		 Build a composite project in the working directory.

		 tsc --init
		 Creates a tsconfig.json with the recommended settings in the working directory.

		 tsc -p ./path/to/tsconfig.json
		 Compiles the TypeScript project located at the specified path.

		 tsc --help --all
		 An expanded version of this information, showing all possible compiler options

		 tsc --noEmit
		 tsc --target esnext
		 Compiles the current project, with additional settings.

	COMMAND LINE FLAGS

		--help, -h
		Print this message.

		--watch, -w
		Watch input files.

		--all
		Show all compiler options.

		--version, -v
		Print the compiler's version.

		--init
		Initializes a TypeScript project and creates a tsconfig.json file.

		--project, -p
		Compile the project given the path to its configuration file, or to a folder with a 'tsconfig.json'.

		--build, -b
		Build one or more projects and their dependencies, if out of date

		--showConfig
		Print the final configuration instead of building.

	COMMON COMPILER OPTIONS

		--pretty
		Enable color and formatting in TypeScript's output to make compiler errors easier to read.
		type: boolean
		default: true

		--target, -t
		Set the JavaScript language version for emitted JavaScript and include compatible library declarations.
		one of: es3, es5, es6/es2015, es2016, es2017, es2018, es2019, es2020, es2021, es2022, esnext
		default: es3

		--module, -m
		Specify what module code is generated.
		one of: none, commonjs, amd, umd, system, es6/es2015, es2020, es2022, esnext, node16, nodenext
		default: undefined

		--lib
		Specify a set of bundled library declaration files that describe the target runtime environment.
		one or more: es5, es6/es2015, es7/es2016, es2017, es2018, es2019, es2020, es2021, es2022, esnext, dom, dom.iterable, webworker, webworker.importscripts, webworker.iterable, scripthost, es2015.core, es2015.collection, es2015.generator, es2015.iterable, es2015.promise, es2015.proxy, es2015.reflect, es2015.symbol, es2015.symbol.wellknown, es2016.array.include, es2017.object, es2017.sharedmemory, es2017.string, es2017.intl, es2017.typedarrays, es2018.asyncgenerator, es2018.asynciterable/esnext.asynciterable, es2018.intl, es2018.promise, es2018.regexp, es2019.array, es2019.object, es2019.string, es2019.symbol/esnext.symbol, es2019.intl, es2020.bigint/esnext.bigint, es2020.date, es2020.promise, es2020.sharedmemory, es2020.string, es2020.symbol.wellknown, es2020.intl, es2020.number, es2021.promise/esnext.promise, es2021.string, es2021.weakref/esnext.weakref, es2021.intl, es2022.array/esnext.array, es2022.error, es2022.intl, es2022.object, es2022.sharedmemory, es2022.string/esnext.string, esnext.intl
		default: undefined

		--allowJs
		Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files.
		type: boolean
		default: false

		--checkJs
		Enable error reporting in type-checked JavaScript files.
		type: boolean
		default: false

		--jsx
		Specify what JSX code is generated.
		one of: preserve, react, react-native, react-jsx, react-jsxdev
		default: undefined

		--declaration, -d
		Generate .d.ts files from TypeScript and JavaScript files in your project.
		type: boolean
		default: `false`, unless `composite` is set

		--declarationMap
		Create sourcemaps for d.ts files.
		type: boolean
		default: false

		--emitDeclarationOnly
		Only output d.ts files and not JavaScript files.
		type: boolean
		default: false

		--sourceMap
		Create source map files for emitted JavaScript files.
		type: boolean
		default: false

		--outFile
		Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output.

		--outDir
		Specify an output folder for all emitted files.

		--removeComments
		Disable emitting comments.
		type: boolean
		default: false

		--noEmit
		Disable emitting files from a compilation.
		type: boolean
		default: false

		--strict
		Enable all strict type-checking options.
		type: boolean
		default: false

		--types
		Specify type package names to be included without being referenced in a source file.

		--esModuleInterop
		Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility.
		type: boolean
		default: false

	You can learn about all of the compiler options at https://aka.ms/tsc


pm2:
	npm i -g pm2
	pm2 start [arquivo.js]
	pm2 start [arquivo.js] --watch
	pm2 stop  [arquivo.js]
	pm2 status
	pm2 start [arquivo.js] --name [nome-do-processo]
	pm2 ls
	pm2 restart [nome-do-processo]
	pm2 delete  [nome-do-processo]
	pm2 monitor
	pm2 monit


netlify:
	netlify deploy
	netlify deploy --prod

maven:
	obs* deve estar na raíz do projeto, no nível do POM.xml

	 mvnw* comando para encapsulamento de arquivos do MAVEN

	./mvnw clean package (build de projeto java [equivalent a npm run build])

	./mvnw dependecy:tree
	./mvnw dependency:copy-dependencies
	./mvnw compile
	./mvnw test
	./mvnw package 
	./mvnw clean 
	history | grep mvn 
	./mvnw clean install
	./mvnw deploy
	./mvnw  install

java:
	java  [nome_do_arquivo.java]   	OBS** deve estar no nivel do arquivo.java
	javac [nome_do_arquivo.java]	OBS** deve estar no nivel do arquivo.java
	
	spring_boot:
			java -jar [nome_do_arquivo.jar]  OBS** deve estar no nivel do arquivo.java
	
expo: 
	**use os comandos no CMD caso dê erro no git bash
	
	** usar os comandos expo-cli em projetos @expo abaixo de 40.0, eles são obsoletos, serão descontinuados
	e possuem muitos bugs
	
	npm i -g expo-cli
	
	expo --help
	
	expo login -u YOUR-USERNAME-OR-EMAIL -p YOUR-PASSWORD
	
	npm start
	expo start
	expo start --clear
	expo build:android
	
	usar estes
	
	npm i eas-cli
	
	eas --help
	eas build -p android

bundletool[programa em jar]:
	DOC: https://developer.android.com/studio/command-line/bundletool?hl=pt-br
	link: https://crast.net/29455/how-to-convert-aab-file-to-apk/
	
	**na pasta do arquivo jar e do arquivo .aab, sempre precedido da flag: java -jar <arquivo.jar> <comando>

	build-bundle command:
		Builds an Android App Bundle from a set of Bundle modules provided as zip files.

	build-apks command:
		Generates an APK Set archive containing either all possible split APKs and
		standalone APKs or APKs optimized for the connected device (see connected-
		device flag).

	build-sdk-bundle command:
		Builds an Android SDK Bundle from a set of Bundle modules provided as zip
		files.

	build-sdk-apks command:
		Generates APKs from an Android SDK Bundle.

	build-sdk-asar command:
		Generates an ASAR from an Android SDK Bundle.

	print-device-targeting-config command:
		Prints a device targeting configuration JSON file in a human-readable
		format.

	evaluate-device-targeting-config command:
		Evaluates which groups and tier a specific device would fall into, in a
		provided device targeting config or a connected device.

	extract-apks command:
		Extracts from an APK Set the APKs that should be installed on a given
		device.

	get-device-spec command:
		Writes out a JSON file containing the device specifications (i.e. features
		and properties) of the connected Android device.

	install-apks command:
		Installs APKs extracted from an APK Set to a connected device. Replaces
		already installed package.

	install-multi-apks command:
		Atomically install APKs and APEXs from multiple APK Sets to a connected
		device.

	validate command:
		Verifies the given Android App Bundle is valid and prints out information
		about it.

	dump command:
		Prints files or extract values from the bundle in a human-readable form.

	get-size command:
		Computes the min and max download sizes of APKs served to different devices
		configurations from an APK Set.

	version command:
		Prints the version of BundleTool.
	
	gerar conjunto de apks a partir de um .aab:
		EX:
			java -jar bundletool.jar build-apks --bundle=DIST.aab --output=DIST.apks 
		
		EX:
			java -jar bundletool.jar build-apks --bundle=DIST.aab --output=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\app\DIST.apks  --ks=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\credentials\@leodev89__logistic-app-dist-keystore.bak.jks --ks-pass=pass:ed3e38c6fa9440bdac7ba01eed221f64 --ks-key-alias=QGxlb2Rldjg5L2xvZ2lzdGljLWFwcC1kaXN0 --key-pass=pass:db2abcf4d811456f84bd448ece39fa49
		
		EX:
			**deve-se criar um arquivo de especificação(EX: spec.json) semelhante ao que há na documentação oficial
			java -jar bundletool.jar build-apks --device-spec=spec.json --bundle=DIST.aab --output=DIST.apks  --ks=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\credentials\@leodev89__logistic-app-dist-keystore.bak.jks --ks-pass=pass:ed3e38c6fa9440bdac7ba01eed221f64 --ks-key-alias=QGxlb2Rldjg5L2xvZ2lzdGljLWFwcC1kaXN0 --key-pass=pass:db2abcf4d811456f84bd448ece39fa49
					
		EX:
			**utilize este modo para testes de aplicativos universais [default]
			java -jar bundletool.jar build-apks --bundle=DIST.aab --output=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\apks\DIST.apks  --ks=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\credentials\@leodev89__logistic-app-dist-keystore.bak.jks --ks-pass=pass:ed3e38c6fa9440bdac7ba01eed221f64 --ks-key-alias=QGxlb2Rldjg5L2xvZ2lzdGljLWFwcC1kaXN0 --key-pass=pass:db2abcf4d811456f84bd448ece39fa49  -–mode=universal
			
		extração:
			renomeie o arquivo .apks para .zip e extraia o(s) .apk