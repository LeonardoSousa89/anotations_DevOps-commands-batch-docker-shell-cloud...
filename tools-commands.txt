linux:
	sudo rm -rf [nome-do-diretório]

dos/batch:

node:
	npm init -y
	npm start
	npm test
	npm run [comando]
	node [arquivo.js]

Cypress:
	npx cypress open
	npx cypress run

	com allure instalado e configurado:
		npx cypress run --env allure=true

		allure generate <directory-with-results>
		allure generate <directory-with-results> -o <directory-with-report>
		allure open <directory-with-report>


	verões antigas:
		npx cypress run --config video=false --env allure=true
		

React:
	npm i -g react
	npx create-react-app [nome-do-app]

Vue:
	npm i -g @vue/cli
	vue create [nome-do-app]

Angular:
	npm i -g @angular/cli
	ng n [nome-do-app]
	
	ng s

	ng g c [nome-do-componente]
	
	ng g i [nome-da-interface]

	ng g d [nome-da-diretiva]
	
	ng g s [nome-do-serviço]
	
	ng g m [nome-do-modulo]

	ng test
	ng test --code-coverage

	ng g guard [nome-do-guard] *pesquisar os nome usados por convenção dos desenvolvedores

Sass:
	npm i -g node-sass
	node-sass [arquivo.scss] [arquivo.css]
	node-sass --watch [arquivo.scss] [arquivo.css]

typescript:
	
	npm i -g typescript
	npx tsc

pm2:
	npm i -g pm2
	pm2 start [arquivo.js]
	pm2 start [arquivo.js] --watch
	pm2 stop  [arquivo.js]
	pm2 status
	pm2 start [arquivo.js] --name [nome-do-processo]
	pm2 ls
	pm2 restart [nome-do-processo]
	pm2 delete  [nome-do-processo]
	pm2 monitor
	pm2 monit


netlify:
	netlify deploy
	netlify deploy --prod

maven:
	obs* deve estar na raíz do projeto, no nível do POM.xml

	 mvnw* comando para encapsulamento de arquivos do MAVEN

	./mvnw clean package (build de projeto java [equivalent a npm run build])

	./mvnw dependecy:tree
	./mvnw dependency:copy-dependencies
	./mvnw compile
	./mvnw test
	./mvnw package 
	./mvnw clean 
	history | grep mvn 
	./mvnw clean install
	./mvnw deploy
	./mvnw  install
	
expo: 
	**use os comandos no CMD caso dê erro no git bash
	
	** usar os comandos expo-cli em projetos @expo abaixo de 40.0, eles são obsoletos, serão descontinuados
	e possuem muitos bugs
	
	npm i -g expo-cli
	
	expo --help
	
	expo login -u YOUR-USERNAME-OR-EMAIL -p YOUR-PASSWORD
	
	npm start
	expo start
	expo start --clear
	expo build:android
	
	usar estes
	
	npm i eas-cli
	
	eas --help
	eas build -p android

bundletool[programa em jar]:
	DOC: https://developer.android.com/studio/command-line/bundletool?hl=pt-br
	link: https://crast.net/29455/how-to-convert-aab-file-to-apk/
	
	**na pasta do arquivo jar e do arquivo .aab, sempre precedido da flag: java -jar <arquivo.jar> <comando>

	build-bundle command:
		Builds an Android App Bundle from a set of Bundle modules provided as zip files.

	build-apks command:
		Generates an APK Set archive containing either all possible split APKs and
		standalone APKs or APKs optimized for the connected device (see connected-
		device flag).

	build-sdk-bundle command:
		Builds an Android SDK Bundle from a set of Bundle modules provided as zip
		files.

	build-sdk-apks command:
		Generates APKs from an Android SDK Bundle.

	build-sdk-asar command:
		Generates an ASAR from an Android SDK Bundle.

	print-device-targeting-config command:
		Prints a device targeting configuration JSON file in a human-readable
		format.

	evaluate-device-targeting-config command:
		Evaluates which groups and tier a specific device would fall into, in a
		provided device targeting config or a connected device.

	extract-apks command:
		Extracts from an APK Set the APKs that should be installed on a given
		device.

	get-device-spec command:
		Writes out a JSON file containing the device specifications (i.e. features
		and properties) of the connected Android device.

	install-apks command:
		Installs APKs extracted from an APK Set to a connected device. Replaces
		already installed package.

	install-multi-apks command:
		Atomically install APKs and APEXs from multiple APK Sets to a connected
		device.

	validate command:
		Verifies the given Android App Bundle is valid and prints out information
		about it.

	dump command:
		Prints files or extract values from the bundle in a human-readable form.

	get-size command:
		Computes the min and max download sizes of APKs served to different devices
		configurations from an APK Set.

	version command:
		Prints the version of BundleTool.
	
	gerar conjunto de apks a partir de um .aab:
		EX:
			java -jar bundletool.jar build-apks --bundle=DIST.aab --output=DIST.apks 
		
		EX:
			java -jar bundletool.jar build-apks --bundle=DIST.aab --output=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\app\DIST.apks  --ks=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\credentials\@leodev89__logistic-app-dist-keystore.bak.jks --ks-pass=pass:ed3e38c6fa9440bdac7ba01eed221f64 --ks-key-alias=QGxlb2Rldjg5L2xvZ2lzdGljLWFwcC1kaXN0 --key-pass=pass:db2abcf4d811456f84bd448ece39fa49
		
		EX:
			**deve-se criar um arquivo de especificação(EX: spec.json) semelhante ao que há na documentação oficial
			java -jar bundletool.jar build-apks --device-spec=spec.json --bundle=DIST.aab --output=DIST.apks  --ks=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\credentials\@leodev89__logistic-app-dist-keystore.bak.jks --ks-pass=pass:ed3e38c6fa9440bdac7ba01eed221f64 --ks-key-alias=QGxlb2Rldjg5L2xvZ2lzdGljLWFwcC1kaXN0 --key-pass=pass:db2abcf4d811456f84bd448ece39fa49
					
		EX:
			**utilize este modo para testes de aplicativos universais [default]
			java -jar bundletool.jar build-apks --bundle=DIST.aab --output=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\apks\DIST.apks  --ks=C:\Users\somen\OneDrive\Desktop\DIST\mobile-APP\apk\credentials\@leodev89__logistic-app-dist-keystore.bak.jks --ks-pass=pass:ed3e38c6fa9440bdac7ba01eed221f64 --ks-key-alias=QGxlb2Rldjg5L2xvZ2lzdGljLWFwcC1kaXN0 --key-pass=pass:db2abcf4d811456f84bd448ece39fa49  -–mode=universal
			
		extração:
			renomeie o arquivo .apks para .zip e extraia o(s) .apk